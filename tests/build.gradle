/*
 * AndFHEM - Open Source Android application to control a FHEM home automation
 * server.
 *
 * Copyright (c) 2011, Matthias Klass or third-party contributors as
 * indicated by the @author tags or express copyright attribution
 * statements applied by the authors.  All third-party contributions are
 * distributed under license by Red Hat Inc.
 *
 * This copyrighted material is made available to anyone wishing to use, modify,
 * copy, or redistribute it subject to the terms and conditions of the GNU GENERAL PUBLIC LICENSE, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU GENERAL PUBLIC LICENSE
 * for more details.
 *
 * You should have received a copy of the GNU GENERAL PUBLIC LICENSE
 * along with this distribution; if not, write to:
 *   Free Software Foundation, Inc.
 *   51 Franklin Street, Fifth Floor
 *   Boston, MA  02110-1301  USA
 */



apply plugin: 'java'

dependencies {
    testCompile 'com.pivotallabs:robolectric:1.1'
    testCompile 'com.google.android:android:4.0.1.2'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit-dep:4.10'
    testCompile 'org.mockito:mockito-all:1.9.0'

    compile project(path: ':ActionBarSherlock')
    compile project(path: ':app')
}

repositories {
    mavenCentral()
}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

test {
    //makes the standard streams (err and out) visible at console when running tests
    testLogging.showStandardStreams = true

    //tweaking memory settings for the forked vm that runs tests
    jvmArgs '-Xms128m', '-Xmx512m', '-XX:MaxPermSize=128m'

    //listening to test execution events
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}
