/*
 * AndFHEM - Open Source Android application to control a FHEM home automation
 * server.
 *
 * Copyright (c) 2011, Matthias Klass or third-party contributors as
 * indicated by the @author tags or express copyright attribution
 * statements applied by the authors.  All third-party contributions are
 * distributed under license by Red Hat Inc.
 *
 * This copyrighted material is made available to anyone wishing to use, modify,
 * copy, or redistribute it subject to the terms and conditions of the GNU GENERAL PUBLIC LICENSE, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU GENERAL PUBLIC LICENSE
 * for more details.
 *
 * You should have received a copy of the GNU GENERAL PUBLIC LICENSE
 * along with this distribution; if not, write to:
 *   Free Software Foundation, Inc.
 *   51 Franklin Street, Fifth Floor
 *   Boston, MA  02110-1301  USA
 */

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://raw.github.com/eburtsev/gdata-maven/master' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'

        // google sites dependencies ...
        classpath 'com.google.gdata.gdata-java-client:gdata-sites-2.0:1.47.1'
        classpath 'javax.mail:mail:1.4.7'
        classpath 'com.google.oauth-client:google-oauth-client:1.17.0-rc'

        // Original plugin of Jake Wharton is no longer supported. => Switch to a fork
        classpath 'com.github.cowst:gradle-android-test-plugin:0.11.0-SNAPSHOT'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'android-test'

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'http://partnerdemo.artifactoryonline.com/partnerdemo/snapshots' }
}

dependencies {
    compile fileTree(dir: './libs', include: '*.jar')
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    compile 'com.android.support:support-v4:19.+'
    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'commons-net:commons-net:3.3'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.google.guava:guava:16.0.1'
    compile 'org.apache.commons:commons-lang3:3.2.1'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit:4.10'
    testCompile 'org.robolectric:robolectric:2.1.+'
    testCompile('com.squareup:fest-android:1.0.+') {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    // make buggy android studio resolve test dependencies...
    androidTestCompile 'org.hamcrest:hamcrest-all:1.3'
    androidTestCompile 'junit:junit:4.10'
    androidTestCompile 'org.robolectric:robolectric:2.1.+'
    androidTestCompile('com.squareup:fest-android:1.0.+') {
        exclude group: 'com.android.support', module: 'support-v4'
    }
}

android {
    // temporary fix until Android Studio 0.8.1 is released
    // (https://code.google.com/p/android/issues/detail?id=72450)
    useOldManifestMerger true

    compileSdkVersion 19
    buildToolsVersion '20'

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 19
    }

    signingConfigs {
        release {
            storeFile file("release.keystore")
            keyAlias "android"
            storePassword ""
            keyPassword ""
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        androidTest {
            java.srcDir file('src/test/java')
            resources.srcDir file('src/test/resources')
        }
        main {
            aidl.srcDirs = ['src/main/aidl']
            java.srcDir file('src/main/java')
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }

    productFlavors {
        inapp {
            packageName "li.klass.fhem"
        }
        premium {
            packageName "li.klass.fhempremium"
        }
    }

    // TODO resolve errors and remove this
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

task readSigningPasswordsFromConsole(
        dependsOn: ['readSigningStorePasswordFromConsole', 'readSigningKeyAliasPasswordFromConsole'])

task readSigningStorePasswordFromConsole << {
    def console = System.console()
    def storePassword = new String(console.readPassword('\n\nEnter store password: \n> '))
    android.signingConfigs.release.storePassword = storePassword
}

task readSigningKeyAliasPasswordFromConsole << {
    def console = System.console()
    def aliasPassword = new String(console.readPassword('\nEnter alias / google sites password: \n>'))
    android.signingConfigs.release.keyPassword = aliasPassword
}

tasks.whenTaskAdded { task ->
    if (task.name == 'packageInappRelease' || task.name == 'packagePremiumRelease') {
        task.dependsOn readSigningPasswordsFromConsole
    }
}

task artifacts {
    group = "Help"
    description = "Displays the artifacts associated with each configuration of " + project
    doFirst {
        println "  Project:" + project.name
        project.configurations.each { conf ->
            println "    Configuration: ${conf.name}"
            conf.allDependencies.each { dep ->
                println "      ${dep.group}:${dep.name}:${dep.version}"
            }
        }
    }
}

task release(dependsOn: ['assembleRelease', 'uploadToGoogleSites']) << {
}

/*************************************
 * GOOGLE SITES
 *********************************** */

task uploadToGoogleSites(dependsOn: 'readSigningKeyAliasPasswordFromConsole') << {
    uploadApkToGoogleSites();
}

import com.google.gdata.client.sites.SitesService
import com.google.gdata.data.PlainTextConstruct
import com.google.gdata.data.media.MediaFileSource
import com.google.gdata.data.sites.AttachmentEntry
import com.google.gdata.data.sites.ContentFeed
import com.google.gdata.data.sites.FileCabinetPageEntry

import javax.activation.MimetypesFileTypeMap

def uploadApkToGoogleSites() {
    def attachmentContentFeedUrl = "https://sites.google.com/feeds/content/site/andfhem/"

    def service = new SitesService("li.klass-andFHEM-v1");
    service.setUserCredentials("andFHEM@klass.li", '' + android.signingConfigs.release.keyPassword);


    def contentFeed = service.getFeed(new URL(attachmentContentFeedUrl), ContentFeed.class)

    def entries = contentFeed.getEntries()

    for (e in entries) {
        def href = e.getRevisionLink().getHref()
        def id = href.substring(href.lastIndexOf("/") + 1)

        def fileTitle = e.getTitle().getText()
        if (fileTitle.equals("google-release.apk")) {
            deleteGoogleSitesAttachment(service, id)
        }
    }

    updateGoogleSitesAPK(service)
}

def deleteGoogleSitesAttachment(service, id) {
    def attachment = service.getEntry(new URL("https://sites.google.com/feeds/content/site/andfhem/" + id + "?with-mappings=true"), FileCabinetPageEntry.class)
    attachment.delete();
}

def updateGoogleSitesAPK(service) {
    def title = "google-release.apk"
    def description = ""

    def mediaTypes = new MimetypesFileTypeMap()
    mediaTypes.addMimeTypes("application/vnd.android.package-archive")

    def file = new File("app/build/apk/app-inapp-release.apk")

    def newAttachment = new AttachmentEntry();
    newAttachment.setMediaSource(new MediaFileSource(file, mediaTypes.getContentType(file)));
    newAttachment.setTitle(new PlainTextConstruct(title));
    newAttachment.setSummary(new PlainTextConstruct(description));

    service.insert(new URL("https://sites.google.com/feeds/content/site/andfhem/"), newAttachment);
}

/*************************************
 * Javadoc
 *********************************** */

android.applicationVariants.all { variant ->
    task("javadoc${variant.name}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
    }
}